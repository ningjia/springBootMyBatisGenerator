<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--id:必选，上下文id，用于在生成错误时提示-->
    <context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">
        <!-- 设置要使用的Java文件的编码，默认使用当前平台的编码 -->
        <property name="javaFileEncoding" value="utf-8"/>
        <!-- 对注释进行控制 -->
        <commentGenerator>
            <!-- suppressAllComments是去掉所有的注解 -->
            <property name="suppressAllComments" value="true"></property>
            <!-- suppressDate是去掉生成日期那行注释 -->
            <property name="suppressDate" value="true"></property>
        </commentGenerator>

        <!-- 数据库配置信息 -->
        <jdbcConnection driverClass="${driverClass}"
                        connectionURL="${connectionURL}"
                        userId="${userId}"
                        password="${password}">
        </jdbcConnection>

        <!-- java类型处理器：指定JDBC类型和Java类型如何转换，默认使用JavaTypeResolverDefaultImpl -->
        <javaTypeResolver>
            <!--
               true：强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal;
               false：默认,
                   scale>0;length>18：使用BigDecimal;
                   scale=0;length[10,18]：使用Long；
                   scale=0;length[5,9]：使用Integer；
                   scale=0;length<5：使用Short；
            -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成实体类的配置(必须配置) -->
        <!-- java模型创建器，是必须要的元素
           负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
           targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
           targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
        -->
        <javaModelGenerator targetPackage="${modelPackage}" targetProject="${src_main_java}">
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="true"></property>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!-- 生成Mapper接口对应的XML文件(可选配置)，
            如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
           targetPackage/targetProject:同javaModelGenerator
        -->
        <sqlMapGenerator targetPackage="${sqlMapperPackage}" targetProject="${src_main_resources}">
            <property name="enableSubPackages" value="true"></property>
        </sqlMapGenerator>

        <!-- 生成Mapper接口文件，注意，如果没有配置该元素，那么默认不会生成Mapper接口
           targetPackage/targetProject:同javaModelGenerator
           type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
               1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
               2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
               3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
           注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
       -->
        <javaClientGenerator targetPackage="${mapperPackage}" targetProject="${src_main_java}" type="ANNOTATEDMAPPER">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- 配置table,这里使用SQL通配符%来匹配所有表。generatedKey意味着所有的表都有一个id自增的主键，在生成实体类的时候会根据该配置生成相应的注解 -->
        <!--
        <table tableName="%">
            <generatedKey column="epa_id" sqlStatement="Mysql" identity="true" />
        </table>
        -->
        <!-- Oracle 序列的配置方式
            <generatedKey column="id" sqlStatement="select SEQ_{1}.nextval from dual" identity="false" type="pre"/>
            这里的 {1} 代表的是对应表的大写形式，{0} 是小写形式
        -->

        <!-- 配置table(指定表) -->
        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
           tableName（必要）：要生成对象的表名；
           domainObjectName 给表对应的 model 起名字
           注意：大小写敏感问题。
        -->
        <!-- <table tableName="user" domainObjectName="User"> -->
        <!-- 用来修改表中某个列的属性,一个table元素中可以有多个columnOverride元素.property属性来指定列要生成的属性名称. -->
        <!-- <columnOverride column="username" property="userName" /> -->
        <table tableName="user"></table>

    </context>
</generatorConfiguration>
